#'   the next page of search results.
#'
#' @return a list of audio features, audio info of the tracks in all the playlist
#' @export
#'
#' @examples
get_audioFeatures_from_playlist <- function(user.id, limit = 50, offset = 0){
nxt_check <- get_playlist_byUser(user.id, limit, offset, filter=FALSE)$`next`
cond = !is.null(nxt_check)
playlist.ids <- get_playlist_byUser(user.id, limit, offset)$id
playlist.names <- get_playlist_byUser(user.id, limit, offset)$name
n <- 1
while(cond){
cat("Requesting more playlist...\n")
more_ids <- get_playlist_byUser(user.id, limit = limit, offset = n*limit)$id
playlist.ids <- append(playlist.ids, more_ids)
cond <- !is.null(get_playlist_byUser(user.id, limit = limit, offset = n*limit, filter = FALSE)$`next`)
n <- n + 1
}
track.ids <- c()
track.playlist <- c()
cat("Pulling tracks...\n")
for(i in 1:length(playlist.ids)){
get_track.ids <- get_track_byPlaylist(playlist.ids[i])$track.id
track.ids <- append(track.ids, get_track.ids)
track.playlist <- append(track.playlist, rep(playlist.names[i], length(get_track.ids)))
}
cat("Pulling audio features and track info...\n")
res_feat <- get_multiple_audio_features(track.ids[1:limit])$audio_features
res_info <- get_multiple_tracks_info(track.ids[1:limit])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
# res_info <- get_multiple_tracks_info(track.ids[1:limit]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets)
n <- ceiling(length(track.ids)/limit)
m <- seq(1, n*limit+1, limit)
for(j in 2:n){
#more_res_feat <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features
#more_res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
#res_feat <- mapply(c, res_feat, more_res_feat, SIMPLIFY = FALSE)
#res_info <- mapply(c, res_info, more_res_info, SIMPLIFY = FALSE)
# res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets) %>% rbind(res_info)
}
#res <- append(res_info, res_feat)
#res[["playlist.name"]] <- track.playlist
return(res_info)
}
get_audioFeatures_from_playlist("gorpublicusage")
rm(ttt)
rm(test)
rm(li)
rm(r)
rm(df)
r <- get_audioFeatures_from_playlist("gorpublicusage")
View(r)
#'
#' @param user.id The Spotify user ID
#' @param limit Maximum number of results to return
#' @param offset The index of the first result to return. Use with limit to get
#'   the next page of search results.
#'
#' @return a list of audio features, audio info of the tracks in all the playlist
#' @export
#'
#' @examples
get_audioFeatures_from_playlist <- function(user.id, limit = 50, offset = 0){
nxt_check <- get_playlist_byUser(user.id, limit, offset, filter=FALSE)$`next`
cond = !is.null(nxt_check)
playlist.ids <- get_playlist_byUser(user.id, limit, offset)$id
playlist.names <- get_playlist_byUser(user.id, limit, offset)$name
n <- 1
while(cond){
cat("Requesting more playlist...\n")
more_ids <- get_playlist_byUser(user.id, limit = limit, offset = n*limit)$id
playlist.ids <- append(playlist.ids, more_ids)
cond <- !is.null(get_playlist_byUser(user.id, limit = limit, offset = n*limit, filter = FALSE)$`next`)
n <- n + 1
}
track.ids <- c()
track.playlist <- c()
cat("Pulling tracks...\n")
for(i in 1:length(playlist.ids)){
get_track.ids <- get_track_byPlaylist(playlist.ids[i])$track.id
track.ids <- append(track.ids, get_track.ids)
track.playlist <- append(track.playlist, rep(playlist.names[i], length(get_track.ids)))
}
cat("Pulling audio features and track info...\n")
res_feat <- get_multiple_audio_features(track.ids[1:limit])$audio_features
res_info <- get_multiple_tracks_info(track.ids[1:limit])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
# res_info <- get_multiple_tracks_info(track.ids[1:limit]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets)
n <- ceiling(length(track.ids)/limit)
m <- seq(1, n*limit+1, limit)
for(j in 2:n){
#more_res_feat <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features
res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")] %>% rbind(res_info)
#res_feat <- mapply(c, res_feat, more_res_feat, SIMPLIFY = FALSE)
#res_info <- mapply(c, res_info, more_res_info, SIMPLIFY = FALSE)
# res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets) %>% rbind(res_info)
}
#res <- append(res_info, res_feat)
#res[["playlist.name"]] <- track.playlist
return(res_info)
}
r <- get_audioFeatures_from_playlist("gorpublicusage")
View(r)
View(r)
#'
#' @param user.id The Spotify user ID
#' @param limit Maximum number of results to return
#' @param offset The index of the first result to return. Use with limit to get
#'   the next page of search results.
#'
#' @return a list of audio features, audio info of the tracks in all the playlist
#' @export
#'
#' @examples
get_audioFeatures_from_playlist <- function(user.id, limit = 50, offset = 0){
nxt_check <- get_playlist_byUser(user.id, limit, offset, filter=FALSE)$`next`
cond = !is.null(nxt_check)
playlist.ids <- get_playlist_byUser(user.id, limit, offset)$id
playlist.names <- get_playlist_byUser(user.id, limit, offset)$name
n <- 1
while(cond){
cat("Requesting more playlist...\n")
more_ids <- get_playlist_byUser(user.id, limit = limit, offset = n*limit)$id
playlist.ids <- append(playlist.ids, more_ids)
cond <- !is.null(get_playlist_byUser(user.id, limit = limit, offset = n*limit, filter = FALSE)$`next`)
n <- n + 1
}
track.ids <- c()
track.playlist <- c()
cat("Pulling tracks...\n")
for(i in 1:length(playlist.ids)){
get_track.ids <- get_track_byPlaylist(playlist.ids[i])$track.id
track.ids <- append(track.ids, get_track.ids)
track.playlist <- append(track.playlist, rep(playlist.names[i], length(get_track.ids)))
}
cat("Pulling audio features and track info...\n")
res_feat <- get_multiple_audio_features(track.ids[1:limit])$audio_features
res_info <- get_multiple_tracks_info(track.ids[1:limit])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
# res_info <- get_multiple_tracks_info(track.ids[1:limit]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets)
n <- ceiling(length(track.ids)/limit)
m <- seq(1, n*limit+1, limit)
for(j in 2:n){
res_feat <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")] %>% rbind(res_info)
#res_feat <- mapply(c, res_feat, more_res_feat, SIMPLIFY = FALSE)
#res_info <- mapply(c, res_info, more_res_info, SIMPLIFY = FALSE)
# res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets) %>% rbind(res_info)
}
res <- cbind(res_info, res_feat, track.playlist)
#res[["playlist.name"]] <- track.playlist
return(res)
}
r <- get_audioFeatures_from_playlist("gorpublicusage")
#'
#' @param user.id The Spotify user ID
#' @param limit Maximum number of results to return
#' @param offset The index of the first result to return. Use with limit to get
#'   the next page of search results.
#'
#' @return a list of audio features, audio info of the tracks in all the playlist
#' @export
#'
#' @examples
get_audioFeatures_from_playlist <- function(user.id, limit = 50, offset = 0){
nxt_check <- get_playlist_byUser(user.id, limit, offset, filter=FALSE)$`next`
cond = !is.null(nxt_check)
playlist.ids <- get_playlist_byUser(user.id, limit, offset)$id
playlist.names <- get_playlist_byUser(user.id, limit, offset)$name
n <- 1
while(cond){
cat("Requesting more playlist...\n")
more_ids <- get_playlist_byUser(user.id, limit = limit, offset = n*limit)$id
playlist.ids <- append(playlist.ids, more_ids)
cond <- !is.null(get_playlist_byUser(user.id, limit = limit, offset = n*limit, filter = FALSE)$`next`)
n <- n + 1
}
track.ids <- c()
track.playlist <- c()
cat("Pulling tracks...\n")
for(i in 1:length(playlist.ids)){
get_track.ids <- get_track_byPlaylist(playlist.ids[i])$track.id
track.ids <- append(track.ids, get_track.ids)
track.playlist <- append(track.playlist, rep(playlist.names[i], length(get_track.ids)))
}
cat("Pulling audio features and track info...\n")
res_feat <- get_multiple_audio_features(track.ids[1:limit])$audio_features
res_info <- get_multiple_tracks_info(track.ids[1:limit])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
# res_info <- get_multiple_tracks_info(track.ids[1:limit]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets)
n <- ceiling(length(track.ids)/limit)
m <- seq(1, n*limit+1, limit)
for(j in 2:n){
res_feat <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")] %>% rbind(res_info)
#res_feat <- mapply(c, res_feat, more_res_feat, SIMPLIFY = FALSE)
#res_info <- mapply(c, res_info, more_res_info, SIMPLIFY = FALSE)
# res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets) %>% rbind(res_info)
}
res <- cbind(res_info, res_feat)
#res[["playlist.name"]] <- track.playlist
return(res)
}
r <- get_audioFeatures_from_playlist("gorpublicusage")
View(r)
r <- get_audioFeatures_from_playlist("nouk")
View(r)
#'
#' @param user.id The Spotify user ID
#' @param limit Maximum number of results to return
#' @param offset The index of the first result to return. Use with limit to get
#'   the next page of search results.
#'
#' @return a list of audio features, audio info of the tracks in all the playlist
#' @export
#'
#' @examples
get_audioFeatures_from_playlist <- function(user.id, limit = 50, offset = 0){
nxt_check <- get_playlist_byUser(user.id, limit, offset, filter=FALSE)$`next`
cond = !is.null(nxt_check)
playlist.ids <- get_playlist_byUser(user.id, limit, offset)$id
playlist.names <- get_playlist_byUser(user.id, limit, offset)$name
n <- 1
while(cond){
cat("Requesting more playlist...\n")
more_ids <- get_playlist_byUser(user.id, limit = limit, offset = n*limit)$id
playlist.ids <- append(playlist.ids, more_ids)
cond <- !is.null(get_playlist_byUser(user.id, limit = limit, offset = n*limit, filter = FALSE)$`next`)
n <- n + 1
}
track.ids <- c()
track.playlist <- c()
cat("Pulling tracks...\n")
for(i in 1:length(playlist.ids)){
get_track.ids <- get_track_byPlaylist(playlist.ids[i])$track.id
track.ids <- append(track.ids, get_track.ids)
track.playlist <- append(track.playlist, rep(playlist.names[i], length(get_track.ids)))
}
cat("Pulling audio features and track info...\n")
res_feat <- get_multiple_audio_features(track.ids[1:limit])$audio_features
res_info <- get_multiple_tracks_info(track.ids[1:limit])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
# res_info <- get_multiple_tracks_info(track.ids[1:limit]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets)
n <- ceiling(length(track.ids)/limit)
m <- seq(1, n*limit+1, limit)
for(j in 2:n){
res_feat <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")] %>% rbind(res_info)
#res_feat <- mapply(c, res_feat, more_res_feat, SIMPLIFY = FALSE)
#res_info <- mapply(c, res_info, more_res_info, SIMPLIFY = FALSE)
# res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets) %>% rbind(res_info)
}
res <- cbind(res_info, res_feat)
#res[["playlist.name"]] <- track.playlist
return(track.playlist)
}
get_audioFeatures_from_playlist("gorpublicusage")
View(r)
r<-get_audioFeatures_from_playlist("gorpublicusage")
#'
#' @param user.id The Spotify user ID
#' @param limit Maximum number of results to return
#' @param offset The index of the first result to return. Use with limit to get
#'   the next page of search results.
#'
#' @return a list of audio features, audio info of the tracks in all the playlist
#' @export
#'
#' @examples
get_audioFeatures_from_playlist <- function(user.id, limit = 50, offset = 0){
nxt_check <- get_playlist_byUser(user.id, limit, offset, filter=FALSE)$`next`
cond = !is.null(nxt_check)
playlist.ids <- get_playlist_byUser(user.id, limit, offset)$id
playlist.names <- get_playlist_byUser(user.id, limit, offset)$name
n <- 1
while(cond){
cat("Requesting more playlist...\n")
more_ids <- get_playlist_byUser(user.id, limit = limit, offset = n*limit)$id
playlist.ids <- append(playlist.ids, more_ids)
cond <- !is.null(get_playlist_byUser(user.id, limit = limit, offset = n*limit, filter = FALSE)$`next`)
n <- n + 1
}
track.ids <- c()
track.playlist <- c()
cat("Pulling tracks...\n")
for(i in 1:length(playlist.ids)){
get_track.ids <- get_track_byPlaylist(playlist.ids[i])$track.id
track.ids <- append(track.ids, get_track.ids)
track.playlist <- append(track.playlist, rep(playlist.names[i], length(get_track.ids)))
}
cat("Pulling audio features and track info...\n")
res_feat <- get_multiple_audio_features(track.ids[1:limit])$audio_features
res_info <- get_multiple_tracks_info(track.ids[1:limit])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")]
# res_info <- get_multiple_tracks_info(track.ids[1:limit]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets)
n <- ceiling(length(track.ids)/limit)
m <- seq(1, n*limit+1, limit)
for(j in 2:n){
res_feat <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)])[c("artists","available_markets", "name", "popularity", "album.id", "album.name")] %>% rbind(res_info)
#res_feat <- mapply(c, res_feat, more_res_feat, SIMPLIFY = FALSE)
#res_info <- mapply(c, res_info, more_res_info, SIMPLIFY = FALSE)
# res_info <- get_multiple_tracks_info(track.ids[(m[j]):(j*limit)]) %>%
#   select(artists, available_markets) %>%
#   mutate(artists.name = as.list(lapply(artists , "[[" , "name" )),
#          artists.id = as.list(lapply(artists , "[[" , "id")),
#          available.markets = available_markets) %>%
#   select(artists.name, artists.id, available.markets) %>% rbind(res_info)
}
res <- cbind(res_info, res_feat)
#res[["playlist.name"]] <- track.playlist
return(res)
}
r<-get_audioFeatures_from_playlist("gorpublicusage")
View(r)
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
r<-get_audioFeatures_from_playlist("gorpublicusage")
track.ids
length(track.ids)
length(track.ids)/limit
limit
m
get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
m[j]
j*limit
test <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features
test <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
View(test)
View(res_feat)
test <- get_multiple_audio_features(track.ids[(m[j]):(j*limit)])$audio_features %>% rbind(res_feat)
View(res_feat)
r<-get_audioFeatures_from_playlist("gorpublicusage")
View(res_feat)
View(res_feat)
View(res_info)
View(res_feat)
j
track.ids[150]
get_one_audio_features("3TBRJsLCcwroEkA3tD4u2N")
m[j]
m[j]
m[4]
m[3]
track.ids[101]
playlist.ids
get_track_byPlaylist(37i9dQZF1DXa2SPUyWl8Y5)$track.id
get_track_byPlaylist("37i9dQZF1DXa2SPUyWl8Y5")$track.id
playlist.ids
get_track_byPlaylist("37i9dQZF1DXdL58DnQ4ZqM")$track.id
playlist.ids
get_track_byPlaylist("5Ey4nNb7mAfWM7v3SQPaz3")$track.id
get_track_byPlaylist("2D6lEmk601S4eJYxqJ4BJt")$track.id
get_track_byPlaylist("6EXOulh2lBQBVNuyVeMv7L")$track.id
get_track_byPlaylist("37i9dQZF1DX4AyFl3yqHeK")$track.id
View(res_feat)
View(res_info)
View(res_feat)
m[j]
j*limit
length(track.ids)
i
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
get_track.ids
get_track.ids
get_track.ids
get_track.ids
get_track.ids
View(r)
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
j
r<-get_audioFeatures_from_playlist("gorpublicusage")
j
m[j]
length(track.ids)
View(r)
View(r)
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
length(track.playlist)
track.playlist
?cbind
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
r<-get_audioFeatures_from_playlist("gorpublicusage")
r<-get_audioFeatures_from_playlist("gorpublicusage")
j
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("gorpublicusage")
View(r)
rm(r)
library(spotifyrLite)
r<-get_audioFeatures_from_playlist("nouk")
View(r)
r<-get_audioFeatures_from_playlist("spotify")
r<-get_audioFeatures_from_playlist("spotify")
?dput
dput(r, file="/Users/jiayan/Desktop/Spotify_Top50_byCountry.txt")
View(r)
View(r)
write.csv(r, "/Users/jiayan/Desktop/Spotify_playlist_audioFeatures.csv")
length(c("qdasd"))
length(c("qdasd","asdfsd"))
?stop
get_playlist_byUser("gorpublicusage")
get_playlist_byUser("gorpublicusage")
test <- get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
GET("https://api.spotify.com/v1/playlists/59ZbFPES4DQwEjBpWHzrtC")
GET("https://api.spotify.com/v1/playlists/59ZbFPES4DQwEjBpWHzrtC", params = list(limit=10, offset=0))
GET("https://api.spotify.com/v1/playlists/37i9dQZF1DX4AyFl3yqHeK")
GET("https://api.spotify.com/v1/playlists/37i9dQZF1DX4AyFl3yqHeK", params = list(limit=10, offset=0))
GET("https://api.spotify.com/v1/playlists/37i9dQZF1DX4AyFl3yqHeK", params = list(limit=10, offset=0))
get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
1/50
seq(1, 1*50+1, 50)
51/50
ceiling(51/50)
get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
result <- get_audioFeatures_from_user("gorpublicusage")
result <- get_audioFeatures_from_user("gorpublicusage")
result <- get_audioFeatures_from_user("gorpublicusage")
View(result)
get_playlist_byUser("gorpublicusage")
get_audioFeatures_from_playlist(c("6EXOulh2lBQBVNuyVeMv7L","37i9dQZF1DX4AyFl3yqHeK"))
get_audioFeatures_from_playlist(c("6EXOulh2lBQBVNuyVeMv7L"))
get_audioFeatures_from_playlist("6EXOulh2lBQBVNuyVeMv7L")
get_audioFeatures_from_playlist("6EXOulh2lBQBVNuyVeMv7L")
get_audioFeatures_from_playlist(c("6EXOulh2lBQBVNuyVeMv7L","37i9dQZF1DX4AyFl3yqHeK"))
get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
one <- get_audioFeatures_from_playlist("37i9dQZF1DX4AyFl3yqHeK")
two <- get_audioFeatures_from_playlist("6EXOulh2lBQBVNuyVeMv7L")
both <- get_audioFeatures_from_playlist(c("6EXOulh2lBQBVNuyVeMv7L","37i9dQZF1DX4AyFl3yqHeK"))
rm(both)
rm(one)
rm(two)
get_playlist_byUser("gorpublicusage")
client_id <- "8d280370d04c4cda9c0a463cfa8636e3"
client_secret <- "b91b6996ad194150b415313ab7b8db80"
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
get_playlist_byUser("gorpublicusage")
get_audioFeatures_from_user("gorpublicusage")
library(spotifyrLite)
get_audioFeatures_from_user("gorpublicusage")
client_id <- "8d280370d04c4cda9c0a463cfa8636e3"
client_secret <- "b91b6996ad194150b415313ab7b8db80"
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
get_audioFeatures_from_user("gorpublicusage")
library(spotifyrLite)
get_audioFeatures_from_user("gorpublicusage")
f <- dget("/Users/jiayan/Documents/GitHub/spotifyrLite/Spotify_publicPlaylist_AudioFeatures.txt")
get_playlist_byUser("gorpublicusage")
get_audioFeatures_from_playlist(c("6EXOulh2lBQBVNuyVeMv7L","37i9dQZF1DX4AyFl3yqHeK"))
search_playlist_byName("Bossa", limit=3)
get_playlist_byUser("spotify")
